#!/bin/bash

set -o pipefail
set +o hashall

# The directory where ih-core has been installed
export IH_CORE_DIR
IH_CORE_DIR=$(dirname "$(dirname "$(realpath "$0")")")
export IH_CORE_BIN_DIR="$IH_CORE_DIR/bin"
export IH_CORE_LIB_DIR="$IH_CORE_DIR/lib"

export IH_ACTIVE_DOMAINS=${IH_ACTIVE_DOMAINS:-"core"}
export IH_SETUP_LIB_DIRS=${IH_CORE_LIB_DIRS:-$IH_CORE_LIB_DIR}

declare -a IH_SETUP_STEPS
declare -a IH_SETUP_DOMAINS

IFS=: read -r -d '' -a IH_SETUP_LIB_DIRS_ARRAY < <(printf '%s:\0' "$IH_SETUP_LIB_DIRS")
IFS=: read -r -d '' -a IH_ACTIVE_DOMAINS_ARRAY < <(printf '%s:\0' "$IH_ACTIVE_DOMAINS")

# The directory where IH shell augments are to be installed
export IH_DIR="$HOME/.ih"

# The directory where IH shell custom files are to be installed
# These are files that shall not be overwritten during an upgrade,
# they are for the user to customize.
export IH_CUSTOM_DIR="$IH_DIR/custom"

# The directory where IH shell default files are to be installed
# These are files that may be overwritten during an upgrade
export IH_DEFAULT_DIR="$IH_DIR/default"

# If a step sets this then the ih-setup script will
# write out a warning to the user that they should
# source their .rcs when the script is done.
export IH_WANT_RE_SOURCE=""

if [ -e "${IH_CORE_BIN_DIR}"/VERSION ]; then
  VERSION=$(cat "${IH_CORE_BIN_DIR}"/VERSION)
else
  # If version not in the right place, we're probably running from the repo
  VERSION=$(cat "${IH_CORE_BIN_DIR}"/../VERSION)
fi

ih::private::clean-up() {
  local ARG=$?
  if [ -n "$IH_WANT_RE_SOURCE" ]; then
    yellow "One or more steps have modified your shell configuration.
You should source $HOME/.zshrc or $HOME/.bashrc to activate those changes in your current shell.
"
  fi
  exit $ARG
}
trap ih::private::clean-up EXIT

# Source utility functions
for f in "$IH_CORE_LIB_DIR"/utils/*; do
  # shellcheck source=/dev/null
  if grep "#!/" "$f" >/dev/null; then
    . "$f"
  fi
done

# Attempts to return help for the step passed as an argument
function ih::private::step-help() {
  ih::setup::"$1"::help
  return
}

function ih::private::step-test() {
  ih::setup::"$1"::test
  return
}

# Attempts to return dependencies for the step passed as an argument
function ih::private::step-deps() {
  ih::setup::"$1"::deps
  return
}

function ih::private::step-install() {
  ih::setup::"$1"::install
  return
}

# Echoes the content of the file where step $1 is defined
function ih::private::step-show() {
  local STEP_PATH OK
  STEP_PATH=$(grep -R "ih::setup::$1::install" "$IH_CORE_LIB_DIR" | cut -d: -f1)
  OK=$?
  if [[ $OK -eq 0 ]]; then
    cat "$STEP_PATH"
    return
  else
    ih::log::warn "No file found for step $1"
    return 1
  fi
}

# Tries to invoke a step command $2 on a step $1.
# If it can't be invoked because it doesn't exist,
# this will log an error and return 1. Otherwise
# it will return the result of invoking the command.
function ih::private::try-invoke() {
  if [[ $# -ne 2 ]]; then
    ih::log::error "ih::private::try-invoke takes arguments STEP COMMAND"
    return 1
  fi
  local STEP=$1
  local COMMAND=$2
  if command -v "ih::setup::$STEP::$COMMAND" >/dev/null; then
    "ih::setup::$STEP::$COMMAND"
    code=$?
    return $code
  else
    ih::log::error "Step $1 does not implement command $2"
    return 1
  fi
}

# Attempts to return help for the domain passed as $1
function ih::private::domain-help() {
  if command -v "ih::setup::$1" >/dev/null; then
    "ih::setup::$1"
  fi
}

# Applies command $1 to steps.
# Usage: ih::private::apply-to-steps $COMMAND [$DOMAIN] [$STEP...]
# $COMMAND is required
# If $DOMAIN is not provided or is empty then $IH_ACTIVE_DOMAINS will be used and all steps from those domains will be used.
# If $STEP is not provided then all steps from the domain will be used.
# If there are no steps listed then the command will be error.
function ih::private::apply-to-steps() {
  local COMMAND=$1
  shift
  local -a STEPS
  local -a DOMAINS
  local STEP DOMAIN

  if [[ ${#} -eq 0 ]]; then
    # include active domains and all the steps (they will be filtered below)
    DOMAINS=("${IH_ACTIVE_DOMAINS_ARRAY[@]}")
    STEPS=("${IH_SETUP_STEPS[@]}")
  elif [[ ${#} -eq 1 ]]; then
    # one requested domain and all the steps (they will be filtered below)
    DOMAINS=("$1")
    STEPS=("${IH_SETUP_STEPS[@]}")
  else
    # prefix the requested steps with the domain so we can filter in a consistent way.
    DOMAIN="$1"
    DOMAINS=("$DOMAIN")
    shift
    for STEP in "$@"; do
      STEPS=("${DOMAIN}.${STEP}")
    done
  fi

  for STEP in "${STEPS[@]}"; do
    # This will be filtering the steps down to only those which are in domain
    DOMAIN=${STEP%.*}
    # We want to look for the step with spaces on each side, which is annoying to quote
    # shellcheck disable=SC2027
    if [[ " ${DOMAINS[*]} " =~ " "${DOMAIN}" " ]]; then
      if [[ " ${IH_SETUP_STEPS[*]} " =~ " "${STEP}" " ]]; then
        if ! "ih::private::$COMMAND" "$STEP"; then
          ih::log::error "Command $COMMAND failed for step $STEP"
          exit 1
        fi
      else
        ih::log::error "No step found with name '$STEP'"

      fi
    fi
  done
}

# Pretty prints the description of the step in $1
# along with the deps.
function ih::private::describe-step() {
  blue "--------- $1 -----------\n"
  ih::private::step-help "$1"
  echo ""
  echo "depends on: $(ih::private::step-deps "$1")"
  echo ""
}

# Tests the step $1 with nicer logging.
# If IH_DEBUG is not set to 1 then this will
# discard the output of the test command for the step.
function ih::private::test-step() {
  ih::log::debug "Testing step $STEP..."
  if [[ $IH_DEBUG = "1" ]]; then
    ih::private::step-test "$STEP"
  else
    ih::private::step-test "$STEP" >/dev/null
  fi
  TEST_CODE=$?
  if [[ $TEST_CODE = 0 ]]; then
    green "$STEP has been installed\n"
  else
    red "$STEP needs to be installed\n"
  fi
}

# Tests the dependencies of the step in $1,
# recursively. Returns 1 if any dependency
# is not installed.
function ih::private::test-deps() {
  local DEPTH="$2  "
  local FAILED=0
  local DEP
  local DEPS
  DEPS=$(ih::private::try-invoke "$1" deps)
  for DEP in $DEPS; do
    ih::private::step-test "$DEP" >/dev/null
    TEST_CODE=$?
    if [[ $TEST_CODE != 0 ]]; then
      red "$DEPTH Dependency $DEP not installed\n"
      FAILED=1
    else
      green "$DEPTH Dependency $DEP is installed\n"
    fi
    ih::private::test-deps "$DEP" "$DEPTH"
    TEST_CODE=$?
    if [[ $TEST_CODE != 0 ]]; then
      FAILED=1
    fi
  done

  if [[ $FAILED = "1" ]]; then
    return 1
  fi
  return 0

}

# Calls install on the steps passed as arguments.
# If IH_FORCE is set to 1 it will install the step in $1;
# otherwise it will skip steps where test returns 0
# If IH_NO_CONFIRM is set to 1 it will skip confirmation;
# otherwise it will ask the user to confirm
# before invoking the step.
function ih::private::install-step() {
  local TEST_CODE
  if [ "$IH_FORCE" != "1" ]; then
    ih::log::debug "Checking whether step $STEP needs to be installed..."
    ih::private::step-test "$STEP" >/dev/null
    TEST_CODE=$?
    if [[ $TEST_CODE -eq 0 ]]; then
      ih::log::info "${STEP} has been installed (use -f to re-install)"
      return 0
    fi

    ih::private::test-deps "$STEP" >/dev/null
    TEST_CODE=$?
    if [[ $TEST_CODE -ne 0 ]]; then
      red "$STEP dependencies have not been installed (use --force to ignore)\n"
      ih::private::test-deps "$STEP"
      return 1
    fi

  fi

  ih::log::info "Planning to install step $STEP..."

  if [ "$IH_NO_CONFIRM" != "1" ]; then
    local CONFIRM_TEXT
    CONFIRM_TEXT=$(ih::private::step-help "$STEP")
    if [[ -z $CONFIRM_TEXT ]]; then
      CONFIRM_TEXT="About to install step $STEP"
    fi

    ih::ask::confirm "$CONFIRM_TEXT"
    local CONFIRMED_STEP=$?
    if [[ $CONFIRMED_STEP -ne 0 ]]; then
      yellow "Skipping step $STEP\n"
      return 0
    fi
  fi

  ih::private::step-install "$STEP"

  local SUCCCESS=$?
  if [[ $SUCCCESS -eq 0 ]]; then
    green "Installed step $STEP\n"
  else
    ih::log::error "ðŸ’© Installation of step $STEP failed"
    return 1
  fi
}

ih::help() {

  local WITH_HELP=""
  for DOMAIN in "${IH_SETUP_DOMAINS[@]}"; do
    DOMAIN_LABEL=$(printf "    %-10s %s" "$DOMAIN" "$(ih::private::domain-help "$DOMAIN" | head -n 1)")
    WITH_HELP="$WITH_HELP

    $DOMAIN_LABEL"
    for SUBCOMMAND in "${IH_SETUP_STEPS[@]}"; do
      if [[ $SUBCOMMAND =~ ^${DOMAIN}\. ]]; then
        SUBCOMMAND=$(printf "      %-15s %s" "${SUBCOMMAND#"$DOMAIN".}" "$(ih::private::step-help "$SUBCOMMAND" | head -n 1)")
        WITH_HELP="$WITH_HELP
    $SUBCOMMAND"
      fi
    done
  done

  cat <<USAGE
 Usage:
    ih-setup [flags...] {SUBCOMMAND} [arguments]

 By default steps will not be installed if they appear
 to have been installed already. Steps are intended to be idempotent and running
 them with the -f flag to force them to be installed should be safe.

 Subcommands:

    help
        Show this help

    install [domain [step...]]
        Install setup steps. If no domain is provided it will install
        the domains listed in \$IH_ACTIVE_DOMAINS.
        Current active domains: $(green "${IH_ACTIVE_DOMAINS}")

    check [domain [step...]]
        Check if steps are installed

    describe [domain [step...]]
        Shows details about the step(s)

    show {domain} {step}
        Prints the content of the step file

 Setup Steps:${WITH_HELP}

 Global flags:
    -f    Force command even if heuristics indicate it's not needed
    -y    Don't prompt for confirmation
    -v    Verbose logging

Version:
    ${VERSION}

For troubleshooting help:
  - See if there are tips at https://doctorondemand.atlassian.net/wiki/spaces/ENG/pages/2227077212/ih-setup+Troubleshooting
  - Visit the #developer-platform-support stream in Zulip
  - Ask a question in the #dept-eng_infra topic in Slack

USAGE

  exit 0
}

function ih::setup::private::init() {
  local STEP_FILES
  local STEP_FILE

  local STEPS
  local STEP
  local DAG DEPS SORTED_STEPS
  local DOMAIN

  for IH_SETUP_LIB_DIR in "${IH_SETUP_LIB_DIRS_ARRAY[@]}"; do
    STEP_FILES=$(grep -rlE 'function ih::setup::[A-z0-9_.-]+' "$IH_SETUP_LIB_DIR")
    for STEP_FILE in $STEP_FILES; do
      ih::log::debug "Steps found in $STEP_FILE"
      # shellcheck disable=SC1090
      . "$STEP_FILE"
    done
  done

  STEPS=$(compgen -A function | grep -E '^ih::setup::.+::install' | sed -E 's/ih::setup::(.+)::install/\1/' | sort | tr '\n' ' ')

  for STEP in $STEPS; do

    for COMMAND in "install" "test" "help" "deps"; do
      if ! command -v ih::setup::"$STEP"::"$COMMAND" >/dev/null; then
        ih::log::warn "Step $STEP does not provide a function named ih::setup::$STEP::$COMMAND, it will be ignored"
        break 1
      fi
    done

    DEPS=$(ih::private::step-deps "$STEP")
    if [[ -z $DEPS ]]; then
      DAG="$DAG
$STEP $STEP"
    else
      for DEP in $DEPS; do
        DAG="$DAG
$DEP $STEP"
      done
    fi
  done

  SORTED_STEPS=$(echo "$DAG" | tsort | tr '\n' ' ')

  for STEP in $SORTED_STEPS; do
    IH_SETUP_STEPS+=("$STEP")
    DOMAIN=${STEP%.*}
    if [[ ! " ${IH_SETUP_DOMAINS[*]} " =~ $DOMAIN ]]; then
      IH_SETUP_DOMAINS+=("$DOMAIN")
    fi

  done

  ih::log::debug "Steps: ${IH_SETUP_STEPS[*]}"
  ih::log::debug "Domains: ${IH_SETUP_DOMAINS[*]}"

}

function main() {

  ih::setup::private::init

  if [[ $# -eq 0 ]]; then
    ih::help
  fi

  while getopts "yfv" arg; do
    case $arg in
      y) export IH_NO_CONFIRM=1 ;;
      f) export IH_FORCE=1 ;;
      v) export IH_DEBUG=1 ;;
      *)
        ih::help
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))
  local command=${1:?"Run ih-setup help for usage"}
  shift

  case "${command}" in
    -h | -? | --help) command=help ;;
  esac

  case "${command}" in
    help) ;;
    install)
      ih::private::apply-to-steps install-step "${@}"
      return
      ;;
    describe)
      ih::private::apply-to-steps describe-step "${@}"
      return
      ;;
    show)
      ih::private::step-show "${@}"
      return
      ;;
    check)
      ih::private::apply-to-steps test-step "${@}"
      return
      ;;
    private::*)
      : # Assume the caller knows what they're doing
      ;;
    *)
      ih::log::error "Unrecognized command ${command}"
      return 1
      ;;
  esac

  ih::${command} "${@}"
}

main "${@}"
